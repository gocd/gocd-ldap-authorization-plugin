/*
 * Copyright 2022 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"

gocdPlugin {
  id = 'com.thoughtworks.gocd.authorization.ldap'
  pluginVersion = '5.0.0'
  goCdVersion = '22.1.0'
  name = 'LDAP Authorization Plugin for GoCD'
  description = 'LDAP Authorization Plugin for GoCD'
  vendorName = 'Thoughtworks, Inc.'
  vendorUrl = 'https://github.com/gocd/gocd-ldap-authorization-plugin'

  githubRepo {
    owner = System.getenv('GITHUB_USER') ?: 'bob'
    repo = 'gocd-ldap-authorization-plugin'
    token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
  }

  pluginProject = project

  prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
  assetsToRelease = [project.tasks.findByName('jar')]
}

group = 'com.thoughtworks.gocd'
version = gocdPlugin.fullVersion(project)

repositories {
  mavenCentral()
  mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

sourceSets {
  integrationTest {
    java.srcDirs = ['src/integration']
    resources.srcDirs += ['src/testdata']
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

ext {
  deps = [
    gocdPluginApi: 'cd.go.plugin:go-plugin-api:25.3.0',
    apacheDsApi: 'org.apache.directory.api:api-ldap-client-api:2.1.7',
  ]

  versions = project.ext.deps.collectEntries { lib, libGav -> [lib, libGav.split(':').last()] }
}

dependencies {
  compileOnly project.deps.gocdPluginApi
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.13.2'
  implementation project.deps.apacheDsApi
  runtimeOnly group: 'org.apache.directory.api', name: 'api-ldap-codec-standalone', version: project.versions.apacheDsApi
  constraints {
    implementation('org.apache.mina:mina-core:2.2.4') {
      because 'api-ldap-client-api uses an older version with reported vulnerabilities'
    }
    implementation('org.apache.commons:commons-lang3:3.19.0') {
      because 'api-ldap-client-api uses an older version with reported vulnerabilities'
    }
    implementation('com.github.ben-manes.caffeine:caffeine:3.2.2') {
      because 'api-ldap-client-api uses v2 which still uses sun.misc.unsafe'
    }
  }

  testImplementation project.deps.gocdPluginApi
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.20.0'
  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.3'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.6'
  testImplementation group: 'org.jsoup', name: 'jsoup', version: '1.21.2'
  testImplementation platform('org.junit:junit-bom:6.0.0')
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
  testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.1.8'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
  testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher'

  integrationTestImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.5'
  integrationTestImplementation group: 'org.apache.directory.server', name: 'apacheds-core-integ', version: '2.0.0.AM27'
}

test {
  useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  mustRunAfter tasks.test
  useJUnitPlatform()
}

check.dependsOn integrationTest

jar {
  from(configurations.runtimeClasspath) {
    into "lib/"
  }
}
